dist: trusty
sudo: required
matrix:
  include:
    - stage: test
      language: python
      python:
        - "3.6"
      cache:
        directories:
          - $HOME/.cache/pip
      services: 
        - postgresql
        - redis-server
        - docker
      env:
        global:
        - DJANGO_SETTINGS_MODULE=photomy.settings.travis
        - PYTHONPATH="/home/travis/build/meemaw/photomy"
        - PIP_USE_MIRRORS=true
      install:
        - pip install -U pip wheel
        - pip install -r config/requirements.txt
      before_script:
        - psql -c "CREATE DATABASE travisci;" -U postgres
        - cd src
        - python manage.py migrate --noinput --settings=photomy.settings.travis
      script:
        - pytest --cov --ds=photomy.settings.travis
      after_success:
        - bash <(curl -s https://codecov.io/bash) -F python -t $CODECOV_UPLOAD_TOKEN
        
    - stage: test
      language: node_js
      node_js:
        - "node"
      before_script:
        - cd frontend
        - yarn install
      cache:
        yarn: true
        directories:
          - $HOME/.npm
      script:
        - yarn lint
        - yarn test-coverage
      after_success:
        - codecov -F javascript -t $CODECOV_UPLOAD_TOKEN

    - stage: build
      if: (tag IS present OR branch = master) AND NOT tag =~ ^frontend-v.*$
      language: bash
      script:
        - docker build . -t meemaw/photomy:1.1.0
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push meemaw/photomy:1.1.0

    - stage: deploy
      if: tag IS present AND tag =~ ^frontend-v.*$
      language: node_js
      node_js:
        - "node"
      before_script:
        - RELEASE_TAG=$(echo $TRAVIS_TAG | cut -d'-' -f 2)
        - echo "Deploying frontend with tag:" $RELEASE_TAG
        - echo "export const VERSION_INFO = { tag: $RELEASE_TAG, branch: $TRAVIS_BRANCH, commit: $TRAVIS_COMMIT }"
        - cd frontend
        - yarn install
        - sudo pip install --upgrade pip
        - sudo pip install awscli
      cache:
        yarn: true
        directories:
          - $HOME/.npm
      script:
        - gulp setProd
        - yarn build
        - aws s3 sync build s3://photomy.si --delete
      after_success:
        - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
      

stages:
  - test
  - build
  - deploy
  